datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  schedules     Schedule[] @relation("UserSchedules")
  tasks         Task[]     @relation("UserTasks")
  settings      Settings[]
  master        Master[]

  @@map("users")
}

model Settings {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Master {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  categories Category[]

  @@map("masters")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Schedule {
  id                  String               @id @default(cuid())
  title               String
  description         String?
  note                String?
  startTime           DateTime
  endTime             DateTime
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  notificationMethods NotificationMethod[]
  categoryId          Int?
  category            Category?            @relation(fields: [categoryId], references: [id])
  tasks               Task[]               @relation("ScheduleTasks")
  urls                Url[]                @relation("ScheduleUrls")
  userId              String               @map("user_id")
  user                User                 @relation("UserSchedules", fields: [userId], references: [id])
}

model NotificationMethod {
  id         Int      @id @default(autoincrement())
  type       String
  scheduleId String   @map("schedule_id")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  @@map("notification_methods")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String
  color      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  masterId   String   @map("master_id")
  master     Master   @relation(fields: [masterId], references: [id], onDelete: Cascade)

  schedules Schedule[]
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  startTime   DateTime?
  endTime     DateTime?
  scheduleId  String       @map("schedule_id")
  schedule    Schedule     @relation("ScheduleTasks", fields: [scheduleId], references: [id])
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  timelines   Timeline[]   @relation("TaskTimeline")
  userId      String       @map("user_id")
  user        User         @relation("UserTasks", fields: [userId], references: [id])

  @@map("tasks")
}

enum TaskStatus {
  TODO
  WIP
  DONE
  PENDING
  ABOLISHED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
  URGENT
}

model Url {
  id         String   @id @default(cuid())
  name       String
  url        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  scheduleId String   @map("schedule_id")
  schedule   Schedule @relation("ScheduleUrls", fields: [scheduleId], references: [id])

  @@map("urls")
}

model Timeline {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  task       Task     @relation("TaskTimeline", fields: [taskId], references: [id])
  time       DateTime

  @@map("timelines")
}
